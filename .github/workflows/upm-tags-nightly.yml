name: UPM-Tags-Nightly
on:
  workflow_dispatch:
  schedule:
  - cron: "0 0 * * *"

jobs:
  format-upm:
    name: Format UPM
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: myRepo

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: theirRepo
        repository: vis2k/Mirror

    - name: Format and push to UPM branch
      run: |
        shopt -s extglob
        git config --global user.email "github-workflow-agent@github.com"
        git config --global user.name "GitHub Workflow Agent"
        sudo apt-get -y update
        sudo apt-get -y install jq
        cd "$GITHUB_WORKSPACE/theirRepo"
        theirTags=$(git tag --sort=committerdate)
        echo "Their tags: $theirTags"
        cd "$GITHUB_WORKSPACE/myRepo"
        sudo mkdir "$GITHUB_WORKSPACE/PackageTemplate"
        sudo cp -a "$GITHUB_WORKSPACE/myRepo/PackageTemplate/." "$GITHUB_WORKSPACE/PackageTemplate"
        myTags=$(git tag)
        echo "My tags: $myTags"
        for theirTag in $theirTags
        do
          doContinue=false
          for requiredPrefix in $REQUIRED_PREFIXES
          do
            if [[ "$requiredPrefix" != "" && "$theirTag" != "$requiredPrefix"* ]]; then
              echo "their tag $theirTag is missing required prefix $requiredSubstring. Skipping"
              doContinue=true
              break
            fi
          done
          if $doContinue; then
            continue
          fi
          for requiredSubstring in $REQUIRED_SUBSTRINGS
          do
            if [[ "$requiredSubstring" != "" && "$theirTag" != *"$requiredSubstring"* ]]; then
              echo "their tag $theirTag is missing required subtring $requiredSubstring. Skipping"
              doContinue=true
              break
            fi
          done
          if $doContinue; then
            continue
          fi
          for excludedSubstring in $EXCLUDED_SUBSTRINGS
          do
            if [[ "$excludedSubstring" != "" && "$theirTag" == *"$excludedSubstring"* ]]; then
              echo $"their tag $theirTag contains excluded subtring $excludedSubstring. Skipping."
              doContinue=true
              break
            fi
          done
          if $doContinue; then
            continue
          fi
          tagToVersion="${theirTag//[!0-9-.]/}"
          if [[ "$myTags" == *"$tagToVersion"* ]]; then
            echo "Already released tag: $tagToVersion. Skipping"
            continue
          fi
          echo "Creating upm release for tag $theirTag"
          cd "$GITHUB_WORKSPACE/theirRepo"
          git reset --hard
          git checkout tags/$theirTag
          cd "$GITHUB_WORKSPACE/myRepo"
          git checkout -B $UPM_BRANCH
          echo "Listing their repo"
          ls "$GITHUB_WORKSPACE/theirRepo"
          sudo rm -rf !('.git'|'.gitattributes'|'.gitignore') || true
          for upmFile in $UPM_FILES
          do
            echo "Moving file at path $GITHUB_WORKSPACE/theirRepo/$upmFile"
            sudo mv -v "$GITHUB_WORKSPACE/theirRepo/$upmFile" "$GITHUB_WORKSPACE/myRepo/"
          done
          for upmParentFolder in $UPM_FOLDER_CONTENTS
          do
            echo "Moving file at path $GITHUB_WORKSPACE/theirRepo/$upmFile"
            sudo mv -v "$GITHUB_WORKSPACE/theirRepo/$upmParentFolder"/* "$GITHUB_WORKSPACE/myRepo/"
          done
          sudo cp -a "$GITHUB_WORKSPACE/PackageTemplate/." "$GITHUB_WORKSPACE/myRepo/"
          package=$(cat package.json)
          newPackage=$(jq --arg newVersion "$tagToVersion" '.version = $newVersion' <<<"$package")
          echo "$newPackage" > package.json
          git add -A
          git commit -m "Format for upm" || true
          upmSHA1=$(git rev-parse $UPM_BRANCH)
          git tag -a $tagToVersion -m "UPM - Release $version" $upmSHA1
          git push -u origin $UPM_BRANCH --follow-tags -f
          echo "Created upm release for tag $tagToVersion"
        done
      env:
        UPM_FILES: "LICENSE README.md CONTRIBUTING.md"
        UPM_FOLDER_CONTENTS: "Assets/Mirror"
        UPM_BRANCH: releases/upm
        REQUIRED_PREFIXES: "v"
        REQUIRED_SUBSTRINGS: ""
        EXCLUDED_SUBSTRINGS: ""
      shell: bash